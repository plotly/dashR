% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dash.R
\docType{class}
\name{Dash}
\alias{Dash}
\title{Generate a Dash server}
\format{An \link[R6:R6Class]{R6::R6Class} generator object}
\usage{
app <- Dash$new(
  name = "dash",
  server = fiery::Fire$new(),
  assets_folder = 'assets',
  assets_url_path = '/assets',
  assets_ignore = '',
  serve_locally = TRUE,
  routes_pathname_prefix = '/',
  requests_pathname_prefix = '/'
)
}
\description{
Description coming soon
}
\section{Arguments}{

\tabular{lll}{
\code{name} \tab \tab The name of the Dash application (placed in the \code{<title>}
of the HTML page).\cr
\code{server} \tab \tab The web server used to power the application.
Must be a \link[fiery:Fire]{fiery::Fire} object.\cr
\code{serve_locally} \tab \tab Whether to serve HTML dependencies locally or
remotely (via URL).\cr
\code{routes_pathname_prefix} \tab \tab a prefix applied to the backend routes.\cr
\code{requests_pathname_prefix} \tab \tab a prefix applied to request endpoints
made by Dash's front-end.\cr
\code{external_scripts} \tab \tab An optional list of valid URLs from which
to serve JavaScript source for rendered pages.\cr
\code{external_stylesheets} \tab \tab An optional list of valid URLs from which
to serve CSS for rendered pages.\cr
\code{suppress_callback_exceptions} \tab \tab Whether to relay warnings about
possible layout mis-specifications when registering a callback. \cr
\code{components_cache_max_age} \tab \tab An integer value specifying the time
interval prior to expiring cached assets. The default is 2678400 seconds,
or 31 calendar days.
}
}

\section{Fields}{

\describe{
\item{\code{server}}{
A cloned (and modified) version of the \link[fiery:Fire]{fiery::Fire} object
provided to the \code{server} argument (various routes will be added which enable
the dashR functionality).
}
\item{\code{config}}{
A list of configuration options passed along to dash-renderer.
Users shouldn't need to alter any of these options unless they are
constructing their own authorization front-end or otherwise need to know
where the application is making API calls.
}
}
}

\section{Methods}{

\describe{
\item{\code{layout(...)}}{
Set the layout (i.e., user interface). The layout should be either a
collection of DashR components (e.g., \link{dccSlider}, \link{htmlDiv}, etc) or
a function which returns a collection of components.
}
\item{\code{layout_get(render = TRUE)}}{
Retrieves the layout. If render is \code{TRUE}, and the layout is a function,
the result of the function (rather than the function itself) is returned.
}
\item{\code{callback(func = NULL, output = NULL)}}{
A callback function defintion. The \code{func} argument accepts any R function
and \code{output} defines which layout component property should adopt the results
(via an \link{output} object). To determine what events trigger this callback,
provide \link{input} (and/or \link{state}) object(s) (which should reference
layout components) as argument value(s) to \code{func}.
}
\item{\code{run_server(host = NULL, port = NULL, block = TRUE, showcase = FALSE, ...)}}{
Launch the application. If provided, \code{host}/\code{port} set
the \code{host}/\code{port} fields of the underlying \link[fiery:Fire]{fiery::Fire} web
server. The \code{block}/\code{showcase}/\code{...} arguments are passed along
to the \code{ignite()} method of the \link[fiery:Fire]{fiery::Fire} server.
}
\item{\code{run_heroku(host = "0.0.0.0", port = Sys.getenv('PORT', 8080), ...)}}{
Like \code{run_server()} but sets sensible \code{host}/\code{port} defaults
for running the app on Heroku.
}
}
}

\seealso{
\url{https://plot.ly/dashR/}
}
\keyword{datasets}
