% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dash.R
\docType{class}
\name{Dash}
\alias{Dash}
\title{R6 class representing a Dash application}
\format{An \link[R6:R6Class]{R6::R6Class} generator object}
\usage{
Dash
}
\arguments{
\item{server}{\link[fiery:Fire]{fiery::Fire} object. The web server used to power the application.}

\item{assets_folder}{Character. A path, relative to the current working directory,
for extra files to be used in the browser. All .js and
.css files will be loaded immediately unless excluded by \code{assets_ignore},
and other files such as images will be served if requested. Default is \code{assets}.}

\item{assets_url_path}{Character. Specify the URL path for asset serving. Default is \code{assets}.}

\item{eager_loading}{Logical. Controls whether asynchronous resources are prefetched (if \code{TRUE}) or loaded on-demand (if \code{FALSE}).}

\item{assets_ignore}{Character. A regular expression, to match assets to omit from
immediate loading. Ignored files will still be served if specifically requested. You
cannot use this to prevent access to sensitive files.}

\item{serve_locally}{Logical. Whether to serve HTML dependencies locally or
remotely (via URL).}

\item{meta_tags}{List of lists. HTML \code{<meta>} tags to be added to the index page.
Each list element should have the attributes and values for one tag, eg:
\code{list(name = 'description', content = 'My App')}.}

\item{url_base_pathname}{Character. A local URL prefix to use app-wide. Default is
\code{/}. Both \code{requests_pathname_prefix} and \code{routes_pathname_prefix} default to \code{url_base_pathname}.
Environment variable is \code{DASH_URL_BASE_PATHNAME}.}

\item{routes_pathname_prefix}{Character. A prefix applied to the backend routes.
Environment variable is \code{DASH_ROUTES_PATHNAME_PREFIX}.}

\item{requests_pathname_prefix}{Character. A prefix applied to request endpoints
made by Dash's front-end. Environment variable is \code{DASH_REQUESTS_PATHNAME_PREFIX}.}

\item{external_scripts}{List. An optional list of valid URLs from which
to serve JavaScript source for rendered pages. Each entry can be a string (the URL)
or a named list with \code{src} (the URL) and optionally other \code{<script>} tag attributes such
as \code{integrity} and \code{crossorigin}.}

\item{external_stylesheets}{List. An optional list of valid URLs from which
to serve CSS for rendered pages. Each entry can be a string (the URL) or a list
with \code{href} (the URL) and optionally other \code{<link>} tag attributes such as
\code{rel}, \code{integrity} and \code{crossorigin}.}

\item{compress}{Logical. Whether to  try to compress files and data served by Fiery.
By default, \code{brotli} is attempted first, then \code{gzip}, then the \code{deflate} algorithm,
before falling back to \code{identity}.}

\item{suppress_callback_exceptions}{Logical. Whether to relay warnings about
possible layout mis-specifications when registering a callback.}

\item{show_undo_redo}{Logical. Set to \code{TRUE} to enable undo and redo buttons for
stepping through the history of the app state.}

\item{update_title}{Character. Defaults to \code{Updating...}; configures the document.title
(the text that appears in a browser tab) text when a callback is being run.
Set to NULL or '' if you don't want the document.title to change or if you
want to control the document.title through a separate component or
clientside callback.}

\item{path}{Character. Represents a URL path comprised of strings, parameters
(strings prefixed with :), and wildcards (*), separated by /. Wildcards can
be used to match any path element, rather than restricting (as by default) to
a single path element. For example, it is possible to catch requests to multiple
subpaths using a wildcard. For more information, see \link{Route}.}

\item{handler}{Function. Adds a handler function to the specified method and path.
For more information, see \link{Route}.}

\item{methods}{Character. A string indicating the request method (in lower case,
e.g. 'get', 'put', etc.), as used by \code{reqres}. The default is \code{get}.
For more information, see \link{Route}.}

\item{old_path}{Character. Represents the URL path to redirect,
comprised of strings, parameters (strings prefixed with :), and
wildcards (*), separated by /. Wildcards can be used to match any
path element, rather than restricting (as by default) to a single
path element. For example, it is possible to catch requests to multiple
subpaths using a wildcard. For more information, see \link{Route}.}

\item{new_path}{Character or function. Same as \code{old_path}, but represents the
new path which the client should load instead. If a function is
provided instead of a string, it should have \code{keys} within its formals.}

\item{methods}{Character. A string indicating the request method
(in lower case, e.g. 'get', 'put', etc.), as used by \code{reqres}. The
default is \code{get}. For more information, see \link{Route}.}

\item{render}{Logical. If the layout is a function, should the function be
executed to return the layout? If \code{FALSE}, the function is returned as-is.}

\item{value}{An object of the \code{dash_component} class, which provides
a component or collection of components, specified either as a Dash
component or a function that returns a Dash component.}

\item{version}{Character. The version number of React to use.}

\item{output}{Named list. The \code{output} argument provides the component \code{id}
and \code{property} which will be updated by the callback; a callback can
target one or more outputs (i.e. multiple outputs).}

\item{params}{Unnamed list; provides \link{input} and \link{state} statements, each
with its own defined \code{id} and \code{property}. For pattern-matching callbacks,
the \code{id} field of a component is written in JSON-like syntax and provides
fields that are arbitrary keys which describe the targets of the callback.
See \link{selectors} for more details.}

\item{func}{Function; must return \link{output} provided \link{input} or \link{state}
arguments. \code{func} may be any valid R function, or a character string
containing valid JavaScript, or a call to \link{clientsideFunction},
including \code{namespace} and \code{function_name} arguments for a locally served
JavaScript function.}

\item{name}{Character. The name of the resource.}

\item{duration}{Numeric. The time in seconds to report. Internally, this is
rounded to the nearest millisecond.}

\item{description}{Character. A description of the resource.}

\item{asset_path}{Character. Specifies asset filename whose URL should be returned.}

\item{prefix}{Character. Specifies pathname prefix; default is to use \code{requests_pathname_prefix}.}

\item{path}{Character. A path string prefixed with a leading \code{/} which directs
at a path or asset directory.}

\item{requests_pathname_prefix}{Character. The pathname prefix for the application when
deployed. Defaults to the environment variable set by the server,
or \code{""} if run locally.}

\item{path}{Character. A path string prefixed with a leading \code{/} which directs
at a path or asset directory.}

\item{requests_pathname_prefix}{Character. The pathname prefix for the app on
a deployed application. Defaults to the environment variable set by the server,
or \code{""} if run locally.}

\item{string}{Character; the index string template, with interpolation keys included.}

\item{template_index}{Character. A formatted string with the HTML index string. Defaults to the initial template.}

\item{...}{Named list. The unnamed arguments can be passed as individual named lists corresponding to the components of the Dash HTML index. These include the same argument as those found in the \code{index_string()} template.}

\item{string}{Character. A string representation of the name of the Dash application.}

\item{host}{Character. A string specifying a valid IPv4 address for the Fiery server, or \code{0.0.0.0} to listen on all addresses. Default is \code{127.0.0.1} Environment variable: \code{HOST}.}

\item{port}{Integer. Specifies the port number on which the server should listen (default is \code{8050}). Environment variable: \code{PORT}.}

\item{block}{Logical. Start the server while blocking console input? Default is \code{TRUE}.}

\item{showcase}{Logical. Load the Dash application into the default web browser when server starts? Default is \code{FALSE}.}

\item{use_viewer}{Logical. Load the Dash application into RStudio's viewer pane? Requires that \code{host} is either \code{127.0.0.1} or \code{localhost}, and that Dash application is started within RStudio; if \code{use_viewer = TRUE} and these conditions are not satisfied, the user is warned and the app opens in the default browser instead. Default is \code{FALSE}.}

\item{debug}{Logical. Enable/disable all the Dash developer tools (and the within-browser user interface for the callback graph visualizer and stack traces) unless overridden by the arguments or environment variables. Default is \code{FALSE} when called via \code{run_server}. For more information, please visit \url{https://dashr.plotly.com/devtools}. Environment variable: \code{DASH_DEBUG}.}

\item{dev_tools_ui}{Logical. Show Dash's developer tools UI? Default is \code{TRUE} if \code{debug == TRUE}, \code{FALSE} otherwise. Environment variable: \code{DASH_UI}.}

\item{dev_tools_hot_reload}{Logical. Activate hot reloading when app, assets, and component files change? Default is \code{TRUE} if \code{debug == TRUE}, \code{FALSE} otherwise. Requires that the Dash application is loaded using \code{source()}, so that \code{srcref} attributes are available for executed code. Environment variable: \code{DASH_HOT_RELOAD}.}

\item{dev_tools_hot_reload_interval}{Numeric. Interval in seconds for the client to request the reload hash. Default is \code{3}. Environment variable: \code{DASH_HOT_RELOAD_INTERVAL}.}

\item{dev_tools_hot_reload_watch_interval}{Numeric. Interval in seconds for the server to check asset and component folders for changes. Default \code{0.5}. Environment variable: \code{DASH_HOT_RELOAD_WATCH_INTERVAL}.}

\item{dev_tools_hot_reload_max_retry}{Integer. Maximum number of failed reload hash requests before failing and displaying a pop up. Default \code{0.5}. Environment variable: \code{DASH_HOT_RELOAD_MAX_RETRY}.}

\item{dev_tools_props_check}{Logical. Validate the types and values of Dash component properties? Default is \code{TRUE} if \code{debug == TRUE}, \code{FALSE} otherwise. Environment variable: \code{DASH_PROPS_CHECK}.}

\item{dev_tools_prune_errors}{Logical. Reduce tracebacks such that only lines relevant to user code remain, stripping out Fiery and Dash references? Only available with debugging. \code{TRUE} by default, set to \code{FALSE} to see the complete traceback. Environment variable: \code{DASH_PRUNE_ERRORS}.}

\item{dev_tools_silence_routes_logging}{Logical. Replace Fiery's default logger with \code{dashLogger} instead (will remove all routes logging)? Enabled with debugging by default because hot reload hash checks generate a lot of requests.}

\item{...}{Additional arguments to pass to the \code{start} handler; see the \link{fiery} documentation for relevant examples.}
}
\value{
List or function, depending on the value of \code{render} (see above).
When returning an object of class \code{dash_component}, the default \code{print}
method for this class will display the corresponding pretty-printed JSON
representation of the object to the console.

List comprising elements \code{states}, \code{triggered}, \code{inputs}.

Character. A string representing the URL to the asset.

Character. A string describing a relative path to a Dash app's asset
given a \code{path} and \code{requests_pathname_prefix}.
}
\description{
A framework for building analytical web applications, Dash offers a pleasant and productive development experience. No JavaScript required.

Create and configure a Dash application.

Connect a URL to a custom server route

Redirect a Dash application URL path

Retrieves the Dash application layout.

Set the Dash application layout (i.e., specify its user interface).

Update the version of React in the list of dependencies served by dash-renderer to the client.

Define a Dash callback.

Request and return the calling context of a Dash callback.

Records timing information for a server resource.

Return a URL for a Dash asset.

Return relative asset paths for Dash assets.

Return a Dash asset path without its prefix.

Specify a custom index string for a Dash application.

Modify index template variables for a Dash application.

Set the title of the Dash app

Start the Fiery HTTP server and run a Dash application.
}
\details{
\code{fiery}, the underlying web service framework upon which Dash for R is based,
supports custom routing through plugins. While convenient, the plugin API
providing this functionality is different from that provided by Flask, as
used by Dash for Python. This method wraps the pluggable routing of \code{routr}
routes in a manner that should feel slightly more idiomatic to Dash users.Querying User-Defined Routes:

It is possible to retrieve the list of user-defined routes by invoking the
\code{get_data} method. For example, if your Dash application object is \code{app}, use
\code{app$server$get_data("user-routes")}.

If you wish to erase all user-defined routes without instantiating a new Dash
application object, one option is to clear the routes manually:
\code{app$server$set_data("user-routes", list())}.

This is a convenience method to simplify adding redirects
for your Dash application which automatically return a \code{301}
HTTP status code and direct the client to load an alternate URL.

If render is \code{TRUE}, and the layout is a function,
the result of the function (rather than the function itself) is returned.

\code{value} should be either a
collection of Dash components (e.g., \link{dccSlider}, \link{htmlDiv}, etc) or
a function which returns a collection of components. The collection
of components must be nested, such that any additional components
contained within \code{value} are passed solely as \code{children} of the top-level
component. In all cases, \code{value} must be a member of the \code{dash_component}
class.

Describes a server or clientside callback relating the values of one or more
\code{output} items to one or more \code{input} items which will trigger the callback
when they change, and optionally \code{state} items which provide additional
information but do not trigger the callback directly.

For detailed examples of how to use pattern-matching callbacks, see the
entry for \link{selectors} or visit our interactive online
documentation at \url{https://dashr.plotly.com}.

The \code{output} argument defines which layout component property should
receive the results (via the \link{output} object). The events that
trigger the callback are then described by the \link{input} (and/or \link{state})
object(s) (which should reference layout components), which become
argument values for R callback handlers defined in \code{func}.

Here \code{func} may either be an anonymous R function, a JavaScript function
provided as a character string, or a call to \code{clientsideFunction()}, which
describes a locally served JavaScript function instead. The latter
two methods define a "clientside callback", which updates components
without passing data to and from the Dash backend. The latter may offer
improved performance relative to callbacks written purely in R.

The \code{callback_context} method permits retrieving the inputs which triggered
the firing of a given callback, and allows introspection of the input/state
values given their names. It is only available from within a callback;
attempting to use this method outside of a callback will result in a warning.

The \code{callback_context} method returns a list containing  three elements:
\code{states}, \code{triggered}, \code{inputs}. The first and last of these correspond to
the values of \code{states} and \code{inputs} for the current invocation of the
callback, and \code{triggered} provides a list of changed properties.

The \code{callback_context.record_timing} method permits retrieving the
duration required to execute a given callback. It may only be called
from within a callback; a warning will be thrown and the method will
otherwise return \code{NULL} if invoked outside of a callback.

The \code{get_asset_url} method permits retrieval of an asset's URL given its filename.
For example, \code{app$get_asset_url('style.css')} should return \code{/assets/style.css} when
\code{assets_folder = 'assets'}. By default, the prefix is the value of \code{requests_pathname_prefix},
but this is configurable via the \code{prefix} parameter. Note: this method will
present a warning and return \code{NULL} if the Dash app was not loaded via \code{source()}
if the \code{DASH_APP_PATH} environment variable is undefined.

The \code{get_relative_path} method simplifies the handling of URLs and pathnames for apps
running locally and on a deployment server such as Dash Enterprise. It handles the prefix
for requesting assets similar to the \code{get_asset_url} method, but can also be used for URL handling
in components such as \code{dccLink} or \code{dccLocation}. For example, \code{app$get_relative_url("/page/")}
would return \code{/app/page/} for an app running on a deployment server. The path must be prefixed with
a \code{/}.

The \code{strip_relative_path} method simplifies the handling of URLs and pathnames for apps
running locally and on a deployment server such as Dash Enterprise. It acts almost opposite to the \code{get_relative_path}
method, by taking a \code{relative path} as an input, and returning the \code{path} stripped of the \code{requests_pathname_prefix},
and any leading or trailing \code{/}. For example, a path string \code{/app/homepage/}, would be returned as
\code{homepage}. This is particularly useful for \code{dccLocation} URL routing.

The \code{index_string} method allows the specification of a custom index by changing
the default \code{HTML} template that is generated by the Dash UI. #' Meta tags, CSS, and JavaScript are some examples of features
that can be modified. This method will present a warning if your
HTML template is missing any necessary elements
and return an error if a valid index is not defined. The following interpolation keys are
currently supported:
\describe{
\item{\code{{\%metas\%}}}{Optional - The registered meta tags.}
\item{\code{{\%favicon\%}}}{Optional - A favicon link tag if found in assets.}
\item{\code{{\%css\%}}}{Optional - Link tags to CSS resources.}
\item{\code{{\%config\%}}}{Required - Configuration details generated by Dash for the renderer.}
\item{\code{{\%app_entry\%}}}{Required - The container where Dash React components are rendered.}
\item{\code{{\%scripts\%}}}{Required - Script tags for collected dependencies.}
}
\describe{
\item{Example of a basic HTML index string:}{
\preformatted{
"<!DOCTYPE html>
<html>
 <head>
  \{\%meta_tags\%\}
     <title>\{\{%css\%\}\}</title>
     \{\%favicon\%\}
     \{\%css_tags\%\}
 </head>
  <body>
    \{\%app_entry\%\}
    <footer>
     \{\%config\%\}
     \{\%scripts\%\}
    </footer>
  </body>
</html>"
      }
}
}

With the \code{interpolate_index} method, one can pass a custom index with template string
variables that are already evaluated. Directly passing arguments to the \code{template_index}
has the effect of assigning them to variables present in the template. This is similar to the \code{index_string} method
but offers the ability to change the default components of the Dash index as seen in the example below.

If no title is supplied, Dash for R will use 'Dash'.

Starts the Fiery server in local mode and launches the Dash application. If a parameter can be set by an environment variable, that is listed too. Values provided here take precedence over environment variables.
. If provided, \code{host}/\code{port} set the \code{host}/\code{port} fields of the underlying \link[fiery:Fire]{fiery::Fire} web server. The \code{block}/\code{showcase}/\code{...} arguments are passed along
to the \code{ignite()} method of the \link[fiery:Fire]{fiery::Fire} server.
}
\section{Fields}{

\describe{
\item{\code{server}}{A cloned (and modified) version of the \link[fiery:Fire]{fiery::Fire} object
provided to the \code{server} argument (various routes will be added which enable
Dash functionality).}

\item{\code{config}}{A list of configuration options passed along to dash-renderer.
Users shouldn't need to alter any of these options unless they are
constructing their own authorization front-end or otherwise need to know
where the application is making API calls.}
}}

\examples{
library(dash)
app <- Dash$new()

# A handler to redirect requests with `307` status code (temporary redirects);
# for permanent redirects (`301`), see the `redirect` method described below
#
# A simple single path-to-path redirect
app$server_route('/getting-started', function(request, response, keys, ...) {
  response$status <- 307L
  response$set_header('Location', '/layout')
  TRUE
})

# Example of a redirect with a wildcard for subpaths
app$server_route('/getting-started/*', function(request, response, keys, ...) {
  response$status <- 307L
  response$set_header('Location', '/layout')
  TRUE
})

# Example of a parameterized redirect with wildcard for subpaths
app$server_route('/accounts/:user_id/*', function(request, response, keys, ...) {
  response$status <- 307L
  response$set_header('Location', paste0('/users/', keys$user_id))
  TRUE
})
library(dash)
app <- Dash$new()

# example of a simple single path-to-path redirect
app$redirect("/getting-started", "/layout")

# example of a redirect using wildcards
app$redirect("/getting-started/*", "/layout/*")

# example of a parameterized redirect using a function for new_path,
# which requires passing in keys to take advantage of subpaths within
# old_path that are preceded by a colon (e.g. :user_id):
app$redirect("/accounts/:user_id/*", function(keys) paste0("/users/", keys$user_id))
library(dash)
app <- Dash$new()

sample_template <- "<!DOCTYPE html>
<html>
<head>
{\%meta_tags\%}
<title>Index Template Test</title>
{\%favicon\%}
{\%css_tags\%}
</head>
<body>
{\%app_entry\%}
<footer>
{\%config\%}
{\%scripts\%}
</footer>
</body>
</html>"

# this is the default configuration, but custom configurations
# are possible -- the structure of the "config" argument is
# a list, in which each element is a JSON key/value pair, when
# reformatted as JSON from the list:
#  e.g. {"routes_pathname_prefix":"/", "ui":false}
config <- sprintf("<script id='_dash-config' type='application/json'> \%s </script>",
                 jsonlite::toJSON(app$config, auto_unbox=TRUE))

app$interpolate_index(
  sample_template,
  metas = "<meta_charset='UTF-8'/>",
  app_entry = "<div id='react-entry-point'><div class='_dash-loading'>Loading...</div></div>",
  config = config,
  scripts = "")
if (interactive() && require(dash)) {
  library(dashCoreComponents)
  library(dashHtmlComponents)
  library(dash)

  app <- Dash$new()
  app$layout(htmlDiv(
    list(
      dccInput(id = "inputID", value = "initial value", type = "text"),
      htmlDiv(id = "outputID")
    )
   )
  )

  app$callback(output = list(id="outputID", property="children"),
               params = list(input(id="inputID", property="value"),
                        state(id="inputID", property="type")),
    function(x, y)
      sprintf("You've entered: '\%s' into a '\%s' input control", x, y)
  )

  app$run_server(showcase = TRUE)
}
}
\keyword{datasets}
